server:
  port: 80

eureka:
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://18.177.67.173:9001/eureka

spring:
  application:
    name: apigateway-service
  # RabbitMQ 등록
  rabbitmq:
    host: 127.0.0.1
    #RabbitMq가 접근할 때 사용하는 port
    port: 5672
    username: guest
    password: guest
  cloud:
    gateway:
      # CORS 설정
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Origin Access-Control-Allow-Credentials
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOriginPatterns: '*'
            allow-credentials: true
            allowedHeaders: '*'
            allowedMethods: '*'
        add-to-simple-url-handler-mapping: true
      routes:

        # 로그인 API
        - id: member-service
          uri: lb://MEMBER-SERVICE
          predicates:
            - Path=/member-service/login
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/member-service/(?<segment>.*), /$\{segment}

        # 회원가입 API
        - id: member-service
          uri: lb://MEMBER-SERVICE
          predicates:
            - Path=/member-service/member/signup/**
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/member-service/(?<segment>.*), /$\{segment}

        # 회원 API
        # 로그인과 회원가입을 제외한 회원 서비스로의 API 는 모두 권한 인증 처리
        # TODO: feign api = /members/feign, service api = /member --> 통일 시키키
        - id: member-service
          uri: lb://MEMBER-SERVICE
          predicates:
            - Path=/member-service/**
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/member-service/(?<segment>.*), /$\{segment}
            # - AuthorizationHeaderFilter

        # 주문 서비스
        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/**
            - Method=GET,POST,PATCH
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/order-service/(?<segment>.*), /$\{segment}
#            - AuthorizationHeaderFilter

        # 상품 서비스 (사용자 기능)
        - id: product-service
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/product-service/**
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/product-service/(?<segment>.*), /$\{segment}
        #   - AuthorizationHeaderFilter

        # 프로모션 서비스 (사용자 기능)
        - id: promotion-service
          uri: lb://PROMOTION-SERVICE
          predicates:
            - Path=/promotion-service/**
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/promotion-service/(?<segment>.*), /$\{segment}
#            - AuthorizationHeaderFilter

        # 정산 서비스
        - id: calculate-service
          uri: lb://CALCULATE-SERVICE
          predicates:
            - Path=/calculate-service/**
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/calculate-service/(?<segment>.*), /$\{segment}
#            - AuthorizationHeaderFilter

        # 셀러 서비스
        - id: seller-service
          uri: lb://SELLER-SERVICE
          predicates:
          - Path=/seller-service/**
          - Method=GET,POST
          filters:
          - RemoveRequestHeader=Cookie
          - RewritePath=/seller-service/(?<segment>.*), /$\{segment}
#          - AuthorizationHeaderFilter

token:
  expiration_time: 86400000
  secret: member_token

management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, httptrace, busrefresh, info, prometheus, metrics